1. 约定
1.1. 文中以#开始的行表示注释
2.2. 文中以$开始的行表示命令提示符，后面的内容为用户输入
2. linux下将iso文件写入U盘的方法
首先用fdisk -l命令查看U盘的设备文件名称(例如/dev/sdb)，然后用下面的命令将iso文件写入U盘：
    sudo dd bs=4M(可以为其它大小) if=iso文件 of=U盘设备文件名 status=progress oflag=sync
3. ArchLinux系统安装步骤
3.1. 修改tty界面下的字体
所有字体都存放在`/usr/share/kbd/consolefonts`目录下。
这里将其设置为：
    setfont /usr/share/kbd/consolefonts/LatGrkCyr-12*22.psfu.gz
3.2. 连接网络
3.2.1. 扫描当前互联网设备
    ip link
    或
    ip addr show    # 显示网络IP地址
    通过下面的指令可以删除指定的IP地址
    ip addr del xxx.xxx.xxx.xxx dev 设备名
    通过下面的指令可以设置IP地址
    ip addr add xxx.xxx.xxx.xxx dev 设备名
3.2.2. 启用设备
    ip link set 设备名 up
3.2.3. 扫描当前设备下的WiFi列表并得到所有WiFi的名字
    iwlist 设备名 scan | grep ESSID
3.2.4. 使用wpa_supplicant连接网络并后台运行
    wpa_passphrase 网络名 密码 > internet.conf
    wpa_supplicant -c internet.conf -i 设备名 &
    另一种连接无线网的方式是使用wifi-menu命令
3.2.5. 动态分配IP地址
    dhcpcd &
3.2.6. 测试
    ping baidu.com
3.2.7. (可选)若需要远程安装，可以打开sshd服务
    用下面的指令可查看sshd服务的状态
    systemctl status sshd.service
    用下面的命令编辑sshd配置文件
    vim /etc/ssh/sshd_config
    修改PermitRootLogin no为PermitRootLogin yes(若已为yes则不用修改)以允许root用户登录
    修改PasswordAuthentication no为PasswordAuthentication yes以允许用户密码登录
    用下面的指令可以启动sshd服务
    systemctl start sshd.service
    或
    systemctl restart sshd.service
    用下面的命令验证22端口是否处于监听状态
    ss -lntp
    然后在远程配置终端类型以使能远程执行指令
    export TERM=linux
3.3. 更正系统时间(更正时间前可以用timedatectl status命令查看当前系统时间的信息)
    timedatectl set-ntp true
3.4. 配置pacman
3.4.1. 编辑/etc/pacman.conf
    vim /etc/pacman.conf
去掉注释：
    Color
去掉注释(可选)：
    [multilib]
    include = /etc/pacman.d/mirrorlist
    [custom]
    siglevel =optional TrustAll
    server = file:///home/custompkgs
添加(可选)：
    [archlinuxcn]
    siglevel = optional TrustAll
    server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch
3.4.2. 编辑源/etc/pacman.d/mirrorlist
寻找中国的服务器，将它移动到mirrorlist的最顶上，保存退出。
我这里使用的是清华的源：
    ## China
    Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
3.4.3. 刷新数据库
    pacman -Syy
    或
    pacman -Syyu
3.5. 对硬盘分区并安装linux
这里我采用的启动方式是UEFI + GPT，其他的启动方式请参考2.系统安装中出现问题的汇总。
3.5.1. 查看现有的磁盘
    fdisk -l    或   lsblk
3.5.2. 进入磁盘编辑
    fdisk /dev/sda   # /dev/sda为磁盘设备的位置(也可以使用仿图形界面的cfdisk /dev/sda)
    g   # 清除原有分区并创建一个GPT分区表
    n   # 创建一个新的分区/dev/sda1 -- 引导分区
        # 接下来选择分区的编号、起始位置、终止位置（分区大小，可用例如“+300M”的形式）
    n   # 创建一个新的分区/dev/sda2 -- SWAP分区(用于保存内存中的文件以及作为内存的扩展)，此分区不需要太大)，这里我大小设置为1G
    n   # 创建一个新的分区/dev/sda3 -- HOME分区(此分区可选，home的位置可以在主分区上)
    n   # 创建一个新的分区/dev/sda4 -- 主分区，大小我设置为磁盘的所有剩余空间
    p   # 查看待写入的分区结果
    w   # 写入
3.5.3. 定义分区格式
    mkfs.fat -F32 /dev/sda1   # /dev/sda1为引导分区
    mkswap /dev/sda2          # /dev/sda2为SWAP分区
    mkfs.ext4 /dev/sda3       # /dev/sda3为HOME分区
    mkfs.ext4 /dev/sda4       # /dev/sda4为主分区
3.5.4. 打开SWAP
    swapon /dev/sda2
3.5.5. 查看当前的磁盘
    fdisk -l    或   lsblk
3.5.6. 挂载磁盘
    mount /dev/sda4 /mnt        # 挂载主分区
    mkdir /mnt/boot             # 创建启动分区在Live CD上的目录
    mount /dev/sda1 /mnt/boot   # 挂载启动分区
    mkdir /mnt/home             # 在主分区创建家目录的挂载点(若没有为家目录创建独立的分区，则此步骤省略)
    mount /dev/sda3 /mnt/home   # 挂载启动分区
3.5.7. 开始安装
    #可以把下面三个命令的软件包合在一起安装
    pacstrap /mnt  linux linux-firmware     # 安装linux内核及内核映像文件
    pacstrap /mnt base base-devel           # 安装Linux所需的最基础的软件、框架等(这两个要一起安装，因为这二个中有重复的内容)
    pacstrap /mnt vim(或neovim)             # 安装vim编辑器以便在切换到安装系统时编辑文件
3.5.8. 生成磁盘设备挂载文件(注意，一定要以追加方式>>生成)
    genfstab -U /mnt >> /mnt/etc/fstab
3.6. 使用arch-chroot对安装好的系统进行配置
3.6.1. 进入arch-chroot
    arch-chroot /mnt   # /mnt为安装好的系统的主分区在Live CD上的挂载位置
    若安装的是neovim，则为vim和vi建立软连接
    ln -s /usr/bin/nvim /usr/bin/vim
    ln -s /usr/bin/vim /usr/bin/vi
    若安装的是vim则为vi建立软连接
    ln -s /usr/bin/vim /usr/bin/vi
3.6.2. 设置时区和时间
    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime   # 创建链接
    hwclock --systohc                                         # 同步硬件时间(Set RTC from system time)
3.6.3. 编辑本地化的文件并进行本地化
    vim /etc/locale.gen     # 编辑本地化文件，去掉“en_US.UTF-8 UTF-8”和“zh_CN.UTF-8 UTF-8”前面的注释后保存退出
    locale-gen              # 生成本地化
3.6.4. 设置语言(为了防止乱码，这里设置问英文)
    vim /etc/locale.conf    # 编辑本地化的配置文件，在其中输入“LANG=en_US.UTF-8”后保存退出。
    或者
    echo "LANG=en_US.UTF-8" > /etc/locale.conf
3.6.5. (可选)设置键盘布局和键位绑定
    vim /etc/vconsole.conf
3.6.6. 编辑网络主机名
    vim /etc/hostname   # 编辑主机名称，我将其设置为ci，保存退出
    或者
    echo 主机名 > /etc/hostname
3.6.7. 编辑主机文件
    vim /etc/hosts      # 编辑域名与IP地址的对应
    127.0.0.1   localhost
    ::1         localhost
    127.0.1.1   ci.localdomain   ci
    保存退出后可以用ping ci验证
3.6.8. 更改root用户密码
    passwd                  # 更改root用户密码
3.6.9. 安装grub相关
    pacman -S grub efibootmgr intel-ucode os-prober
    # intel-ucode   厂家更新CPU驱动用，如果是AMD的显卡，则安装amd-ucode
    # os-probe      用来寻找电脑中其他操作系统
    uname -m                                                # 查看系统架构
    grub-install --target=x86_64-efi --efi-directory=/boot  # 根据自己的系统架构安装grub
3.6.10. 生成grub配置文件
    grub-mkconfig > /boot/grub/grub.cfg                     # 生成grub配置文件
    或
    grub-mkconfig -o /boot/grub/grub.cfg                    # 生成grub配置文件
3.6.11. 安装基础工具
    pacman -S wpa_supplicant dhcpcd iw dialog openssh netctl wireless_tools net-tools
    # wpa_supplicant    上网工具
    # dhcpcd            动态分配IP地址工具
    # iw                上网工具
    # dialog            上网工具
    # ssh               远程登陆服务器及客户端
    # netctl            网络自动登录工具
    # wireless_tools    无线网络工具
    # net-tools         其它网络工具
    参照1.2.7开启sshd服务并用下面的指令开启dhcpcd服务
    systemctl enable dhcpcd
    systemctl restart dhcpcd
    安装其它工具
    pacman -S man                   # 用户手册
    pacman -S bash-completion       # 命令行补全工具
    pacman -S ntfs-3g               # 使linux识别ntfs文件系统
    pacman -S rpm dpkg              # 包管理工具
    pacman -S feh                   # 图片显示工具
    pacman -S neofetch              # 系统信息显示工具
    pacman -S compton               # 窗口渲染器
    pacman -S etcher                # U盘刻录工具
3.6.11. 重启，完成安装
    用uname -a命令可以查看内核版本
    exit                            # 必须退出arch-chroot返回安装环境
    umount -R /mnt                  # 卸载硬盘分区(可省略)
    killall wpa_supplicant dhcpcd   # 终止掉网络相关的进程(可省略)
    reboot                          # 重启，电脑黑屏后就可以拔掉Live CD了
3.7. 用户配置
3.7.1. 添加用户并设置用户密码
    useradd -m -G wheel ci  # -m    创建家目录
                            # -G    用户所属的组
                            # ci    我的用户名
    passwd ci   # 修改用户密码
3.7.2. 修改用户sudo权限
    vim /etc/sudoers    # 编辑sudoers file，去掉“%wheel ALL=(ALL) ALL”前面的注释，保存退出
    或
    visudo
3.7.3. 切换到低权限的用户
    exit    # 退出root用户，并登陆ci用户

4. 系统安装中出现问题的汇总
4.1. 分区时出现警告：逻辑分区和物理分区不对齐
可能原因：SSD或者是HDD上原来装过Windows，则硬盘最开始的32M空间（图形界面下使用`Gparted`可以看到）是默认空白的。这样就会导致分区的不对齐。但其实对于SSD来说只是影响到速度，使用还是比较正常的
解决方法：(未试验)使用`shred`命令彻底清洗磁盘，但耗时一般较长。
    shred -v /dev/sda
4.2. 关于grub和分区
Arch Linux支持三种启动方式，但启动方式分区和`grub`的安装略有不同。
4.2.1. UEFI + GPT
这是我采用的方式。具体对于`grub`的操作见[上文](system-installation.md/#4-硬盘分区)。较新的主板推荐采用这种方式。
4.2.2. BIOS + MBR
这是较老的主板支持的分区方式，但在某些新的主板上已经不支持了。值得注意的是这种分区方式支持的硬盘是小于`2T`的。
4.2.3. BIOS + GPT
个人感觉这种分区方法的好处是方便后续在这块硬盘上安装别的Linux发行版并提高设备的兼容性。因为最好保证一块硬盘的分区表前后都是一致的，否则会出现兼容性的问题（这是我的猜想，有错误还请指正）。
4.3.4. 三种分区方式及后续挂载方式等的完整命令示例：
4.3.4.1 UEFI + GPT
    # 进入磁盘编辑
    fdisk /dev/sda   # /dev/sda为磁盘设备的位置
    g   # 清除原有分区并创建一个GPT分区表
    n   # 创建一个新的分区/dev/sda1 -- 引导分区
    n   # 创建一个新的分区/dev/sda3 -- SWAP分区(用于保存内存中的文件以及作为内存的扩展)，此分区不需要太大，这里我大小设置为1G
    n   # 创建一个新的分区/dev/sda2 -- 主分区，大小我设置为磁盘的所有剩余空间
    p   # 查看待写入的分区结果
    w   # 写入
    
    # 制作文件系统，这里会出现一些关于磁盘性能的警告，不用特别在意。
    mkfs.fat -F32 /dev/sda1   # /dev/sda1为引导分区，制作为“fat32”格式
    mkfs.ext4 /dev/sda2       # /dev/sda2为主分区，制作为“ext4”格式
    mkswap /dev/sda3          # /dev/sda3为SWAP分区
    
    # 打开swap
    swapon /dev/sda3
    
    挂载
    mount /dev/sda2 /mnt        # 挂载主分区
    mkdir /mnt/boot             # 创建启动分区在Live CD上的目录
    mount /dev/sda1 /mnt/boot   # 挂载启动分区
    
    # 安装Linux所需的最基础的软件、框架等
    pacstrap /mnt base linux linux-firmware
    
    # 生成挂载文件
    genfstab -U /mnt >> /mnt/etc/fstab
    
    # 使用arch-chroot
    arch-chroot /mnt
    
    # 安装grub相关
    pacman -S grub efibootmgr intel-ucode os-prober
    # intel-ucode   厂家更新CPU驱动用，如果是AMD的显卡，则安装amd-ucode
    # os-probe      用来寻找电脑中其他操作系统
    mkdir /boot/grub
    grub-mkconfig > /boot/grub/grub.cfg                      # 生成grub配置文件
    uname -m                                                 # 查看系统架构
    grub-install --target=x86_64-efi --efi-directory=/boot   # 根据自己的系统架构安装                                                            # grub,我这里系统架构是                                                            # x86_64，所以选择安装                                                            # x86_64-efi
4.3.4.2. BIOS + MBR
    # 进入磁盘编辑
    fdisk /dev/sda   # /dev/sda为磁盘设备的位置
    o   # 清除原有分区并创建一个MBR分区表
    n   # 创建一个新的分区/dev/sda1 -- 主分区
    n   # 创建一个新的分区/dev/sda2 -- SWAP分区(用于保存内存中的文件以及作为内存的扩展)，此分区不需要太大，这里我大小设置为1G
    n   # 创建一个新的分区/dev/sda3 -- /home分区，大小我设置为磁盘的所有剩余空间
    p   # 查看待写入的分区结果
    w   # 写入
    
    # 制作文件系统，这里会出现一些关于磁盘性能的警告，不用特别在意。
    mkfs.ext4 /dev/sda1   # /dev/sda1为主分区，制作为“ext4”格式s'y
    mkswap /dev/sda2      # /dev/sda2为SWAP分区
    mkfs.ext4 /dev/sda3   # /dev/sda3为/home分区，制作为“ext4”格式
    
    # 打开swap
    swapon /dev/sda2
    
    # 挂载
    mount /dev/sda1 /mnt        # 挂载主分区
    mkdir /mnt/home             # 创建/home分区在Live CD上的目录
    mount /dev/sda3 /mnt/home   # 挂载/home分区
    
    # 安装Linux所需的最基础的软件、框架等
    pacstrap /mnt base linux linux-firmware
    
    # 生成挂载文件
    genfstab -U /mnt >> /mnt/etc/fstab
    
    # 使用arch-chroot
    arch-chroot /mnt
    
    # 安装grub相关
    pacman -S grub intel-ucode os-prober
    # intel-ucode   厂家更新CPU驱动用，如果是AMD的显卡，则安装amd-ucode
    # os-probe      用来寻找电脑中其他操作系统
    mkdir /boot/grub
    grub-mkconfig > /boot/grub/grub.cfg      # 生成grub配置文件
    grub-install --target=i386-pc /dev/sda   # 敲入这条命令即可，使用BIOS的在grub-install时--target参数统一是i386-pc
                                             # 值得注意的是，这里grub安装的位置选择的直接是硬盘/dev/sda，而不是任何一个分区
4.3.4.3. BIOS + GPT
    # 进入磁盘编辑
    fdisk /dev/sda   # /dev/sda为磁盘设备的位置
    g   # 清除原有分区并创建一个GPT分区表
    n   # 创建一个新的分区/dev/sda1 -- 空白分区，大小为1M
    n   # 创建一个新的分区/dev/sda2 -- 主分区
    n   # 创建一个新的分区/dev/sda3 -- SWAP分区(用于保存内存中的文件以及作为内存的扩展)，此分区不需要太大，这里我大小设置为1G
    n   # 创建一个新的分区/dev/sda4 -- /home分区，大小我设置为磁盘的所有剩余空间
    p   # 查看待写入的分区结果
    w   # 写入
    
    # 制作文件系统，这里会出现一些关于磁盘性能的警告，不用特别在意。
    # 注意这里的/dev/sda1空白分区不需要挂载，也不需要制作文件系统。
    mkfs.ext4 /dev/sda2   # /dev/sda2为主分区，制作为“ext4”格式
    mkswap /dev/sda3      # /dev/sda2为SWAP分区
    mkfs.ext4 /dev/sda4   # /dev/sda4为/home分区，制作为“ext4”格式
    
    # 打开swap
    swapon /dev/sda3
    
    # 挂载
    mount /dev/sda2 /mnt        # 挂载主分区
    mkdir /mnt/home             # 创建/home分区在Live CD上的目录
    mount /dev/sda4 /mnt/home   # 挂载/home分区
    
    # 安装Linux所需的最基础的软件、框架等
    pacstrap /mnt base linux linux-firmware
    
    # 生成挂载文件
    genfstab -U /mnt >> /mnt/etc/fstab
    
    # 使用arch-chroot
    arch-chroot /mnt
    
    # 安装grub相关
    pacman -S grub intel-ucode os-prober
    # intel-ucode   厂家更新CPU驱动用，如果是AMD的显卡，则安装amd-ucode
    # os-probe      用来寻找电脑中其他操作系统
    mkdir /boot/grub
    grub-mkconfig > /boot/grub/grub.cfg              # 生成grub配置文件
    grub-install --force --target=i386-pc /dev/sda
    # 敲入这条命令即可，使用BIOS的在grub-install时--target参数统一是i386-pc
    # 这里也需要使用--force参数强制安装grub，因为无参数情况下的两个警告会使得grub安装失败
    # 值得注意的是，这里grub安装的位置选择的直接是硬盘/dev/sda，而不是任何一个分区

5. 配置桌面管理器或窗口管理器
5.1. 安装xorg
    sudo pacman -S xorg xorg-server xorg-xinit xorg-apps xscreensaver # 图形界面的服务器
    # xorg          xwindow框架，必须
    # xorg-server   xwindow服务，必须
    # xorg-xinit    xwindow终端初始化程序(包含startx)，若安装了图形登录器，此组件可不安装
    # xorg-apps     xwindow应用程序，可选
    # xscreensaver  xwindow屏幕保护程序，可选
5.2. 安装中文字体
    sudo pacman -S noto-fonts-cjk
    # 以下字体可选
    sudo pacman -S ttf-linux-libertine ttf-inconsolata ttf-joypixels ttf-twemoji-color ttf-liberation ttf-droid
    sudo pacman -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenhei
    sudo pacman -S adobe-source-han-mono-cn-fonts adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts
5.3. 安装输入法
5.3.1. 安装fcitx输入法框架及拼音输入法
    sudo pacman -S fcitx fcitx-im fcitx-configtool  # 安装输入法框架
    sudo pacman -S fcitx-googlepinyin               # 安装谷歌拼音
5.3.2. 用sudo vim ~/.xprofile命令编辑文件，在文件中添加设置如下环境变量的命令后保存并重启
    export GTK_IM_MODULE=fcitx
    export QT_IM_MODULE=fcitx
    export XMODIFIERS=@im=fcitx
5.3.3. 还可以使用ibus输入法管理器作为fcitx的替代品
    sudo pacman -S ibus
5.4. 安装网络管理工具
    sudo pacman -S networkmanager net-tools #安装网络管理工具
    sudo systemctl enable NetworkManager         #开启网络管理服务
    sudo systemctl start NetworkManager
    sudo systemctl enable dhcpcd
    sudo systemctl start dhcpcd
5.5. 安装桌面环境(任选其一)
5.5.1. 安装deepin桌面环境
5.5.1.1. 安装deepin桌面及组件
    sudo pacman -S deepin deepin-extra(可选)      #deepin-extra为deepin中附带的软件
5.5.1.2. 安装登录管理器(可选，deepin中附带了lightdm登录管理器)
    sudo pacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
5.5.1.3. 配置lightdm
    sudo vim /etc/lightdm/lightdm.conf   # 修改皮肤
    # 去掉“greeter-session=example-gtk-gnome”前面的注释并将其改为：
    greeter-session=lightdm-deepin-greeter
    保存退出
5.5.1.4. 配置开机启动登录管理器
    sudo systemctl enable lightdm   #启动lightdm服务
5.5.1.5. 启动登录管理器
    sudo systemctl start lightdm
5.5.2. 安装KDE桌面环境
5.5.2.1. 安装KDE桌面
    sudo pacman -S plasma kde-applications
    # kde-applications为KDE附带应用程序
5.5.2.2. 安装图形登录界面
    sudo pacman -S sddm sddm-kcm
5.5.2.3. 开启SDDM服务
    sudo systemctl enable sddm
5.5.2.4. 启动图形登录界面
    sudo systemctl start sddm
5.6. 设置语言为中文
    sudo vim /etc/locale.conf    # 编辑本地化的配置文件，在其中输入“LANG=zh_CN.UTF-8”后保存退出。
    或者
    sudo echo "LANG=zh-CN.UTF-8" > /etc/locale.conf
5.7. xorg使用方法
5.7.1. 找到/etc/X11/xinit/xinitrc文件，使用编辑器在文件末尾进行以下操作：
    exec dwm   # 如果你并不打算使用dwm作为你的窗口管理器，就将其改为你所使用的窗口管理器的启动命令
    twm &
    xclock -geometry 50x50-1+1 &
    xterm -geometry 80x50+494+51 &
    xterm -geometry 80x20+494-0 &
    exec xterm -geometry 80x66+0+0 -name login
    # 找到以上这几行，在它们开头插入“#”以此注释掉
5.7.2. 在进行了以上操作后，在tty下运行startx命令开启X服务，随后即可进入窗口管理器。
5.7.3. 如果你觉得每次修改xinitrc文件要到/etc目录下很麻烦，可以创建软链接到你的用户目录：
    sudo -E ln -sf /etc/X11/xinit/xinitrc ~/.xinitrc

6. 初步配置出现的问题汇总
配备有intel集成显卡和NVIDIA独立显卡的机器登入图形界面时机器挂起(关机)
这主要是Linux对于NVIDIA显卡驱动的问题引起的。如果不启动图形界面，只用tty，是没有问题的。
解决方法(由于我个人不太需要使用N卡，所以没有选择安装对应驱动等)：
    如果你将你的Display Manager加入了守护进程，那么我目前能想到的方法是使用一个Live CD，将你的Arch Linux挂载在Live CD上，然后使用arch-chroot进行操作。
    如果你开机进入的是tty，即你每次都是手动启动图形界面，那么就按照平时在终端中的操作来进行操作。
操作如下：
    sudo pacman -S bumblebee   # 安装bumblebee
    sudo vim /etc/modprobe.d/modprobe.conf
    # 在文件中添加“options nvidia NVreg_Mobile=1”，然后保存退出，重启机器

7. 软件
6.1. 终端相关
7.1.1. yay，AUR的包管理器。
    git clone https://aur.archlinux.org/yay.git
    cd yay/
    makepkg -si   # 编译安装
    # 配置中国镜像：
    yay --aururl "https://aur.tuna.tsinghua.edu.cn" --save
    # 配置文件的位置位于~/.config/yay/config.json，也可通过下面的命令查看修改过的配置：
    yay -P -g
7.1.2. ranger，终端下的文件管理器，Python编写。
    sudo pacman -S ranger
7.1.3. neofetch，系统硬件信息查看。
    sudo pacman -S neofetch
7.1.4. htop，终端下系统资源占用查看工具。
    sudo pacman -S htop
7.1.5. fish，功能强大、智能友好的终端命令解析器。
    sudo pacman -S fish
7.1.6. zsh，功能强大的Linux Shell，配合[`Oh-My-Zsh`](https://ohmyz.sh/)使用更佳。
    sudo pacman -S zsh
7.1.7. openssh，远程连接工具。
    sudo pacman -S openssh
7.1.8. alacritty，使用显卡渲染的终端模拟器。
    sudo pacman -S alacritty
7.1.9. st，来自 Suckless 社区的X下的极简终端模拟器。
    git clone https://git.suckless.org/st   # 克隆源代码的仓库
    cd st/
    sudo make clean install                 # 编译安装
7.1.10. tree，以树形展示目录下的文件。
    sudo pacman -S tree
7.1.11. pactree，展示本地或远程的包的结构。
    sudo pacman -S pacman-contrib   # 包的结构发生了一些改变，现在pactree在pacman-contrib内
7.1.12. zip，解压缩软件。
    sudo pacman -S zip
7.1.13. xsel，可以将终端输出的内容重定向到剪切板上。
    sudo pacman -S xsel
7.1.14. task，终端下的一个Todo List。
    sudo pacman -S task
7.1.15. proxychains，终端命令代理。
    sudo pacman -S proxychains-ng
7.2. 浏览器
7.2.1. Chromium开源、支持多扩展的浏览器。
    sudo pacman -S chromium
7.2.2. Midori轻量、快速的浏览器。
    sudo pacman -S midori
7.3. 录屏相关
7.3.1. SimpleScreenRecorder轻量的录屏软件。
    sudo pacman -S simplescreenrecorder
7.3.2. Screenkey捕捉键盘按键。
    首先添加archlinuxcn，同时去掉multilib前面的注释。
    sudo nano /etc/pacman.conf
    # 添加如下两行：
    # [archlinuxcn]
    # Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
    sudo pacman -S screenkey
7.4. 视频编辑软件Kdenlive。
    sudo pacman -S kdenlive
7.5. 图片编辑软件Gimp
    sudo pacman -S gimp
7.6. 办公
7.6.1. Libreoffice
    sudo pacman -S libreoffice
7.6.2. Thunderbird邮件管理。
    sudo pacman -S thunderbird
7.6.3. Typora跨平台的Markdown编辑器，所见即所得。
    sudo pacman -S typora
7.7. 社交
7.7.1. QQ社交软件。
    sudo pacman -S deepin.com.qq.im
7.7.2. 微信社交软件。
    sudo pacman -S electronic-wechat   # 基于Electron的微信，本质上是网页版的微信
    sudo pacman -S wine-wechat         # Wine集成的Windows平台的微信
    # wine-wechat可能需要安装wine-mono字体，它建议使用pacman进行管理：
    # sudo pacman -S wine-mono

7.8. Steam游戏商店
    sudo pacman -S steam
7.9. 下载工具
7.9.1. Transmission，支持磁力下载。
    sudo pacman -S transmission-qt    # 基于Qt的图形化界面
    sudo pacman -S transmission-gtk   # 基于GTK的图形化界面
    # 两种皆可
7.9.2. qBittorrent
    sudo pacman -S qbittorrent
7.10. 视频播放工具VLC
    sudo pacman -S vlc
7.11. 系统工具
7.11.1. Gparted有图形界面的磁盘无损分区工具。
    sudo pacman -S gparted
7.11.2. Tlp电池性能优化。
  $ sudo pacman -S tlp
7.11.3. Blueman有图形界面的蓝牙设备管理。
    sudo pacman -S blueman
    # 使用之前需要将`bluetooth`添加至守护进程：
    sudo systemctl enable bluetooth
7.11.4. NTFS-3G，Windows文件系统（NTFS）的挂载工具。
    sudo pacman -S ntfs-3g
7.11.5. AppImageLauncher，.appimage文件的启动器。
    sudo pacman -S appimagelauncher
7.11.5. Xcompmgr，X下的窗口渲染工具。可以使得窗口透明化。作为xorg的拓展工具。
    sudo pacman -S xcompmgr
    # 与它类似的窗口渲染器compton貌似已经不在维护，这里也有它的一个替代，叫picom。
7.11.6. Trayer轻量的系统托盘。
    sudo pacman -S trayer
    #`trayer`有很多的选项。这里可以参考我的启动选项：
    trayer --transparent true --expand false --align right --width 20 --SetDockType false --tint 0x88888888 &
7.11.7. ACPI电池状况监控。
    sudo pacman -S acpi
7.11.8. 声卡软件包
    sudo pacman -S alsa-utils   #声音工具包
    sudo pacman -S pulseaudio   #声音服务
    # 可以通过alsamixer或amixer设置音量
7.11.9. 显卡
用如下命令查看显卡信息：
    lspci | grep VGA
安装显卡驱动：
    sudo pacman -S xf86-video-vesa          #intel集成显卡驱动
    sudo pacman -S nvidia nvidia-settings   #Nvidia显卡驱动及设置工具
7.11.10. 安装触摸板驱动
    sudo pacman -S xf86-input-synaptics
7.12. 其他
7.12.1. Virtualbox开源的虚拟机。
    sudo pacman -S virtualbox
7.12.2. Xarchiver图形化的解压缩软件。
    sudo pacman -S xarchiver

8. 软件安装以及使用过程中出现的问题汇总
8.1. 搜狗输入法不显示候选框
如果出现了问题，搜狗输入法会提示：
    搜狗输入法异常！请删除~/.config/SogouPY并重启。
如果以上操作不能解决问题，那么打开终端，输入sogou-qimpanel。如果此时报错：
    sogou-qimpanel: error while loading libraries: libfcitx-qt.so.0: cannot open shared object file: No such file or directory
那么就是缺少库文件的问题，目前最好的解决办法是取消使用fcitx：
    sudo pacman -S fcitx-lilydjwg-git
    # 在安装这个包时，pacman会提示有包冲突，移除冲突的fcitx等相关包即可
然而在我的`LXDE`并且在默认壁纸下，搜狗输入法的状态栏和候选框周围会有一个黑框...不太美观但不影响使用。

8.2. fish下source /etc/profile报错
这里主要是因为fish和Arch Linux默认的bash是两个不同的终端命令解析器。就如Python2.x和Python3.x一样，两个终端命令解析器的对于shell脚本的parsing有一些差别。
这里我的解决办法是将fish`切换为了zsh…毕竟不是特别熟悉fish…
    chsh -s /bin/zsh   # 更改当前用户的默认shell，并重启终端。
8.3. alacritty下使用clear命令清屏幕报错'alacritty': unknown terminal type.
我自己出现这个情况时，在终端敲入命令clear无效，但是敲入/usr/bin/clear有效。所以当时怀疑是环境变量的问题。又切换了终端模拟器到st，问题没有出现…所以又怀疑是alacritty的问题。上网搜索了一下，找到了有效的解决办法，但我没搞懂是为什么…
解决办法：
修改环境变量，在/etc/profile中添加如下：
    export TERMINFO=/usr/share/terminfo
重启终端生效。
8.4. alacritty和st在未完全配置的情况下，使用安装好插件的vim中的字体颜色是纯白
出现这个情况时，我自己本机一共安装了4个终端模拟器：
    alacritty
    lxterminal
    st
    deepin-terminal
在alacritty和st中，vim无法显示其他除白色以外的颜色。起初以为是插件的问题，后来查阅资料之后发现是一个终端变量的问题：
    对于同一条命令echo $TERM，四个终端模拟器的返回各不相同：
    alacritty：alacritty
    lxterminal：xterm-256color
    st：st-256color
    deepin-terminal：xterm-256color
lxterminal和deepin-terminal是可以正常显示vim的颜色的，所以问题出在哪里就显而易见了。对于vim而言，要想正确显示颜色，TERM变量的值只能是xterm-256color或者screen-256color。
解决办法：
修改环境变量，在/etc/profile中加入export TERM=xterm-256color，然后重新加载环境变量source /etc/profile
8.5. 在跟着教程配置dwm时，statusbar出现小方框
这主要是因为系统缺少某些字体。教程中 UP主 状态栏的一些图标，譬如说上传、下载的箭头，都是unicode的字符。如果出现小方框，多半是未安装需要的字体，或者是表情字体的默认项有误。
这里我在安装了之前UP推荐安装的一些表情字体之后，上传和下载的箭头正常显示了。其余的符号存在于另一个字体包中。
解决办法：
安装所需字体：
    sudo pacman -S tty-symbola
安装完成之后重启系统即可。

9. 美化
9.1. 窗口管理器
9.1.1. i3
9.1.1.1. 介绍：i3wm是一个比较好用的平铺式窗口管理器，它的功能比较齐全，自带状态栏、锁屏等工具。
9.1.1.2. 优点：
9.1.1.2.1. 自带功能齐全，用户体验较好。
9.1.1.2.2. 拥有配置文件，能够让用户自定义，启动i3后会生成配置文件，一般在~/.config/i3。
9.1.1.3. 缺点：
9.1.1.3.1. 二进制可执行文件较大，对于配置低的电脑运行起来可能会卡顿。
9.1.1.3.2. 由于拥有配置文件，在每次启动`i3`时会读取配置文件，因此启动速度会较慢。
9.1.1.4. 安装i3：
    sudo pacman -S i3      # 软件包组中有冲突，选择移除即可
    sudo pacman -S dmenu   # i3下常用的一个快速启动器
9.1.1.5. 注意事项：
在配置文件里设置自启程序时，可能会使鼠标呈现“繁忙”的状态(我个人无法忍受)，解决办法就是在程序启动命令之前加上--no-startup-id参数。
9.1.2. dwm
9.1.2.1. 介绍：dwm是 Suckless 社区下X的动态窗口管理器。它以平铺，单片和浮动布局管理窗口。可以动态应用所有布局，从而为正在使用的应用程序和执行的任务优化环境。
9.1.2.2. 优点：
9.1.2.2.1. 全部代码由纯C进行编写。
9.1.2.2.2. 代码格式十分整洁 (毕竟Suckless都是极简主义者)。
9.1.2.2.3. 运行速度快，因为没有配置文件，源代码本身就包含了配置文件。
9.1.2.3. 缺点：
9.1.2.3.1. 由于代码太过于简单，缺少很多功能，可通过官方提供的补丁解决，不过对于`C`新手来说并不容易。
9.1.2.3.2. 由于没有配置文件，所以每次更改源码后必须重新启动`dwm`才能使修改生效;幸运的是，Arch WiKi上有[解决方法](https://wiki.archlinux.org/index.php/Dwm)。
9.1.2.4. 安装dwm
    git clone https://git.suckless.org/dwm
    cd ./dwm
    sudo make clean install
9.1.2.5. 注意事项：
9.1.2.5.1. dwm下载后，如果你目前所使用的终端并不是[st](https://st.suckless.org/)(Simple Terminal)，就需要在config.h中进行一下操作:
    static const char *termcmd[] = { "st", NULL }; 
    // 找到这一行，将"st"修改为你现在用的终端的启动命令
9.1.2.5.2. dwm一般下载后配置文件是config.def.h，但在使用make编译后，会生成config.h，这时可以将config.def.h删除掉，在打补丁时，有些补丁需要修改config.def.h，但它们没有找到，因此会询问文件名，这时，只要输入config.h后回车即可
9.1.2.5.3. dwm下载后，默认的MODKEY是Mod1(也就是Alt)，如果需要修改，就需要在config.h里进行下面这个操作：
    #define MODKEY Mod1Mask; 
    // 找到这一行，将Mod1Mask更改为你想要的键即可。如果要改为Win键，就将其改为Mod4Mask
